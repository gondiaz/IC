import numpy as np

from typing import Tuple
from typing import Callable

from scipy.optimize import brentq

def pes_at_pmts(LT      : Callable  ,
                photons : np.ndarray,
                xs      : np.ndarray,
                ys      : np.ndarray,
                zs      : np.ndarray = None)->np.ndarray:
    """Compute the pes generated in each PMT from photons generated at some point

    Parameters:
        :LT: function
            The Liht Table in functional form
        :photons: np.ndarray
            The photons generated at each hit (in the active volume
            for the S1 and in the EL for S2)
        :xs, ys, zs: np.ndarray
            hit position (zs=None for S2)
    Returns:
        :pes: np.ndarray
            photoelectrons at each PMT produced by each hit.
            Shape is (nsensors, nhits)
    """
    if np.any(zs): #S1
        pes = photons[:, np.newaxis] * LT(xs, ys, zs)
        pes = np.random.poisson(np.sum(pes, axis=0))
    else:          #S2
        pes = photons[:, np.newaxis] * LT(xs, ys)
    return pes.T


def generate_S1_time(size=1):
    tau1 = 4.5; tau2 = 100
    c1 = 0.1  ;c2 = 0.9

    N = 1/(c1*tau1 + c2*tau2)
    A1 = tau1*c1*N
    A2 = tau2*c2*N

    def func(x):
        return A1*np.exp(-x/tau1) + A2*np.exp(-x/tau2) - P

    sol = []
    for i in range(size):
        P = np.random.random()
        sol.append(brentq(func, 0, 10000))

    return np.array(sol)

# @profile
def generate_S1_times_from_pes(S1pes_at_pmts : np.ndarray)->list:
    """Given the S1pes_at_pmts, this function returns the times at which the pes
    are be distributed (see generate_S1_time function).
    It returns a list whose elements are the times at which the photoelectrons in that PMT
    are generated.

    Parameters:
        :S1pes_at_pmts: np.ndarray
            the pes at each PMT generated by each hit
    Returns:
        :S1times: list[np.ndarray,..]
            Each element are the S1 times for a PMT. If certain sensor
            do not see any pes, the array is empty.
    """
    S1times = [generate_S1_time(size=pes) for pes in S1pes_at_pmts]
    return S1times
